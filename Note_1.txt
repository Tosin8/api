Source: Apress
Title: API Management (An Architect's guide to developing and managing APIs)

Chapter 1: Introdution to APIs 

What is API? Application Programming Interface. 
 * An API is a software to software Interface that defines the contract for Applications to talk to each other over a network without user Interaction. 
 * API can be thought of as windows to the code base - they clearly define exactly how a program will interact with the rest of the software application, saving time and resources and avoiding any potential  legal entanglements along the way. 
 * The contract defines the protocol, the input and output formats and the underlying data types to be used for the software components to interact. 

APIs are different from Web Sites
 * Websites publish information that can be consumed by a user, but don't have contracts ( the layout, content and the look and feel can change without prior notice to the users). API - has a well defined contracts, other applications depend on this to use it. If the contract changes , there will be a ripple effect on the apps built using the contract, changes could be in the business logic, or the back-end infrastructure or the interface defining the API contract. 

Defining an API and its characteristics
 * An API defines the contract of a software components in terms of the protocol, data format and the endpoint for two computer applications to communicate with each other over a network. ( In summary: APIs are a set of requirements that govern how two applications can talk to each other). 
 * An APi provides a framework for building SERVICES that can be consumed over HTTP by a wide range of clients running on different platforms eg. iPhone, Tablets, Connected Cars etc. 

 The following info on API should be made available by the API provider: 
  * The functionality provided
  * The location where the API can be accessed. (an HTTP Url)
  * The i/o parameters (names, message format and data types) for the API
  * The SLA ( service-level agreement) that the API provider uses eg. response time, throughput,availability etc
  * Documentation to help understanding the API
  * The technical requirements about the rate limits that controls the number of requests that control the number of requests that an app or user can make within a given period. 

Types of API. 
 * Divided into two categories: Public and Private API (partner API - used for B2B partner integration and internal APIs - used for internal application integration and B2E apps)
 An internal APi can ease and streamline internal application integrations, and to be used for internal developers for building mobile apps for an organization's own use. 
 * Cons of Public APIs: 
   - It can significantly add a lot of management overhead. Example: When a lot of third party apps are actively using an API, it is challenging to upgrade the interface without impacting the apps that are in production. 
   - Increase security risks : whenever an enterprise uses public API, they used to build in additional layers of security to protect their systems from hackers via these Apis. 

Examples of Popular APIs
 * Facebook API (developers.facebook.com)
 * Google API (developers.google.com)
 * ACCuWeather API - providing subscribers with access to location based weather. (api.accuweather.com/developers)
 * Instagram API ( to getting photos  and display them on website or app - Instagram.com/developer)
 * Twitter API (providing three types which are : REST API, search API, streaming API)
 * AT&T - providing a wide range of APIs that exposes thier internal assets and services, they can be used to build apps to send messages, locate users, do text to speech and speech to text etc (developer.att.com/apis)

The Difference Between a Web Service and a Web API
 * Web services - as a method of communicaiton Between two electronic devices over a network.- a software system designed  to support interoperable machine to machine interaction over a network. 
 * A web API is a special kind of web service where the emphasis has been moving to a simpler Rerepresentational State Transfer REST based communications.  
 * A web API can be considered as a subset of web service. A web service has an interface described in a machine processable format. Other systems interact with the web service in a manner prescribed by its description using SOAP (Simple Object Access Protocol) messages, typically conveyed using HTTP with an XML serilazation in conjunction with other web related standards. 
 * REST is another architectural pattern , an alternative to SOAP. 
 * RESTful applications use the HTTP built in headers to carry meta information and use the GET, POST, PUT and DELETE to perform CRUD operations. 
 * It is resource oriented and uses clean URL. The body can be JSON/XML. 
 ABOUT SOAP ? 
  * It typically use HTTP as a transport protocol ( not mandatory)
  * It can be over JMS/FTP/SMTP or any layer 7 protocol. 
  * It's message structure consists of an SOAP envelope, inside of which are the headers and the body ( contains the actual information to be sent)
  * Based on the standard XML format, designed especially to transport and store structured data. 
  * It's a mature standard and is heavily used in many systems, but it does not use many of the functionalities built into HTTP.  

How are APIs different from SOA? 
  SOA: service-oriented architecture. ( its core concept is the notion of service)
 * A service can be defined as a logical Rerepresentation of a repeatable activity that has a  specific outcome. 
 * SOA defines the architecture and principles for designing services for an application to increase its reuse. (Services are well contained and have a well defined interface that defines the contract between the service provider and the consumer). 
 * API are designed  with consumer needs in mind. 
 * The difference from SOA: 
     - SOA helps in the agility and pace of the delivery of a service while API helps in the pace of innovation for building apps. 
     - SOA emerged as a means to shield service consumers from backend changes while API can provide a layer to shield the services from the rapidly changing demands of front-end apps. 

  * Services are the means by which providers codify the base capabilities of their domains. (APIs are the way in which those capabilities are repackaged, productized and shared in an easy to use format). APIs and services are complementary rather than contradictory,and being applied together, dramatically increase the overall effectiveness of enterprise innovation. 
  * At technological level- [SOA is related to XML and SOAP while API is related to REST and JSON] while [API is described using Swagger or RAML]

The API value chain 
 * API provides a means to expose business assets to the end user. 
 * The business asset marks the beginning of the API value chain and making it more available for others to use. It can be any data or business functionality. It can range from product catalogs,to customer information, to twitter feeds, to postal tracking information, to payment and banking services. 

Business models for APIs
 * APIs form the foundation of digital business. The biz model to adopt depends on the asset being exposed as an API. The asset can be data, the biz logic or the presentation. 



Chapter 2 : API management 
APIS forms the window into an enterprise's data and services, they allow applications to easily communicate with each other using a lightweight protocol like HTTP. 
* Developers use APIs to write applications that interact with back end system. 
* Once an API has been created, it needs to be managed using an API management platform. 
* An API management plaform helps an organization publish APIs to internal, partner, and external developers to unlock the unique potential of their assets - providing the core capabilities to ensure a successful  API program throught developer engagement, biz insights, analtyics, security and protection. 

What are API management offerings: 
 - Analyze: business performance, - Monetize : Digital Assets, - Accelerate :Digital channel,- Drive -adoption. 

 API management plaform provides these capabilities: 
  - Developer enablement for APIs (API discovery, developer and app onboarding, collaboration and community, develoeper enablement admistration)
  - Secure, reliable and flexible communicaiton (authentication and authoirzation, threat detection, data privacy, traffic management, interface translation, service orchestration and routing)
  - Api lifecyle management (api publication, version management, change notification, issue management)
  - API auditing, logging and analtyics (activity logging, user auditing, biz value reporting, contract management, advanced analtyics, service level monitoring ) 

An API management platform provides these capabilities as three major types of services which are : 
 - • API GATEWAY SERVICES - allow you to create and manage APIs from existing data and services. They allow you to add security, traffic management, interface translation, orchestration, and routing capabilities into your API. 
 - • ANALTYICS SERVICES - it monitor traffic from individual apps and provide business with insight and operational metrics, API and app performance, and developer engagement metrics.
 -  • DEVELOPER PORTALS - it provide capabilities for developer and app registration and onboarding, API documentation, community management, and API monetization.

In summary: API has 3 management platform services: 
 - Developer services which are: Developer onboarding, API documentation, Community management and Monetization. 
 - Analytics services which are: biz metrics, operational metrics, developer metrics and app performance. 
 - API gateway services which are: API security, Traffic management, Interface translation and 'orchestration and routing'

 Secure, Reliable, and Flexible Communication
API helps digital apps to communicate with back-end services and the core of API is COMMUNICATION and API must create these 3 features of commnication: being secure,reliable and flexible. 

 *API gateway 
    - it provides the services that form the core capabilities required for API commnications between the back end services and digital apps. 
    - it helps to expose, secure and manage backend data and services as RESTful API. 
    - It provides a framework to create a facade (face) in front of the backend service. The face intercepts the API requests to enforce security, validate data, tranform messages, throttle traffic and route it to the backend service. 
    - The static response may be cached to improve the performance. 
    - The gateway can optionally orchestrate requests between multiple backend services and also connect to database to service the requests. 

    Summary: of the capabilities of API gateway - (To secure, Validate, throttle, Transform, Orchestrate, Cache and Route). 
  All these features/ functionalities can be implemented in a gateway, mostly through CONFIGURATION and SCRIPTING extensions. 

* API security
  - it provides access to valuable and protected data and assets. API mgt platform address the following aspects of API security: 
     * authentication - it's the process of uniquely determining and validating the identity of a client. An app acts like a client making an API call, a software that consumes access to enterprise assets, data and services. The app key serves as an identity for the app making a call to the API.It's normally issued and managed via the API mgt plaform of the API provider. An app key is also known as an API key,an app ID or a client ID. 
     The API mgt plaform must have the ability to issue, track and revoke the app key and the service of authentication may require integration with IDENTITY MGT SYSTEM that controls user access to applications and other services. 

     * authorization - It controls the level of access that is provided to an app making an API call. When an app makes an API call,it normally passses an OAuth access token in the HTTP headers. It controls which ApI resources and methods that an app can invoke. An access token can be associated with one or more scopes, each access token may have an expiry duration that controls the duration for which the token is valid, if the token is expired, a new access token would be required to be generated. 

     * identity mediation - API mgt must have the capabilities to integerate  the back end IDM platforms and do indentity mediation. The backend services may be secured using SAML or any other WS-security headers. 

     * data privacy - sensitive data in transit should be encrypted. if data tends to be logged anywhere, it must be masked. Data privacy can be achieved through ENCRYPTION and DATA MASKING. sensitive data needs to be encrypted with digital certificates in transit. The API mgt should have support for SSL/TLS. 

     * key and certificate mgt - the provision of capacity to manage keys and certificates required for data privacy. 
     * DoS (denial of attack) protection -APis are vulnerable to attacks, and it tends to open valuable data and assets outside the firewall of the enterprise and being attack through the means of pumping unexpected high traffic through the APi.  
     * Threat detection - Content based attacks can be in form of malformed XML/JSON, malicious scripts or SQL within the payload. Error visualization capabilities can help detect any hacker attempting to find an exploitable weakness in APIs.

* API Traffic mgt - depending on the nature of data and sercies provided by the API, traffic mgt offers a diff. biz value to diff. classes of customers. providing the following capabilities for traffic mgt - 
  - Consumption quota: defines the number of API calls that an app is allowed to make to the backend over a given time interval. A common purpose for a quota is to divide developers into categories, each having different quotea and relationship with the API. Example: free and paid developers having difference number of calls. 
  - Spike arrest: identify an unexpected rise in the API traffic, helping to protect backend systems that are not designed to handle a high load. API traffic volume exceeding the spike arrest limit may be dropped by the API mgt platform to protect backend systems in the event of DoS attacks. 
  - Usage throttling: provides a mechanism to slow down subsequent API calls, helping to improve the overall performance and reduce impacts duing peak hours. Making sure that the API infrastructure is not slowed down by high volumes of requests from a certain group of customers or apps. 
  - Traffic prioritization : helps the API mgt platform to determine which class of customers should be given higher priorites. API calls from high priority customers shold be processed first. 

* Interface translation -  API being created for customer focus, the interface for the API will likely be different from that of the backend services that is exposed. The API gateway should support the following: 
   - Format translation: the backend system might expect data in SOAP,XML, CSV or any other properitary format. The API gateway should be able to easily transform from one format to another, since data format can't be consumed by the API consumer. Mapping from JSON to any other data format may be supported through customization. 
   - Protocol translation: most backend systems that host services provide a SOAP interface for consumers. SOAP isn't a protocol that is suitable for APIs to build apps for digital services. the protocol transformation from SOAP to REST provides a lightweight interface for consumers. 
   - Service and data mapping: being able to provide a graphical Rerepresentation of the different  backend serice components that maps to provide an API service. 

* Caching - 

 
