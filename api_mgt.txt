Source: Apress
Title: API Management (An Architect's guide to developing and managing APIs)

Chapter 1: Introdution to APIs 

What is API? Application Programming Interface. 
 * An API is a software to software Interface that defines the contract for Applications to talk to each other over a network without user Interaction. 
 * API can be thought of as windows to the code base - they clearly define exactly how a program will interact with the rest of the software application, saving time and resources and avoiding any potential  legal entanglements along the way. 
 * The contract defines the protocol, the input and output formats and the underlying data types to be used for the software components to interact. 

APIs are different from Web Sites
 * Websites publish information that can be consumed by a user, but don't have contracts ( the layout, content and the look and feel can change without prior notice to the users). API - has a well defined contracts, other applications depend on this to use it. If the contract changes , there will be a ripple effect on the apps built using the contract, changes could be in the business logic, or the back-end infrastructure or the interface defining the API contract. 

Defining an API and its characteristics
 * An API defines the contract of a software components in terms of the protocol, data format and the endpoint for two computer applications to communicate with each other over a network. ( In summary: APIs are a set of requirements that govern how two applications can talk to each other). 
 * An APi provides a framework for building SERVICES that can be consumed over HTTP by a wide range of clients running on different platforms eg. iPhone, Tablets, Connected Cars etc. 

 The following info on API should be made available by the API provider: 
  * The functionality provided
  * The location where the API can be accessed. (an HTTP Url)
  * The i/o parameters (names, message format and data types) for the API
  * The SLA ( service-level agreement) that the API provider uses eg. response time, throughput,availability etc
  * Documentation to help understanding the API
  * The technical requirements about the rate limits that controls the number of requests that control the number of requests that an app or user can make within a given period. 

Types of API. 
 * Divided into two categories: Public and Private API (partner API - used for B2B partner integration and internal APIs - used for internal application integration and B2E apps)
 An internal APi can ease and streamline internal application integrations, and to be used for internal developers for building mobile apps for an organization's own use. 
 * Cons of Public APIs: 
   - It can significantly add a lot of management overhead. Example: When a lot of third party apps are actively using an API, it is challenging to upgrade the interface without impacting the apps that are in production. 
   - Increase security risks : whenever an enterprise uses public API, they used to build in additional layers of security to protect their systems from hackers via these Apis. 

Examples of Popular APIs
 * Facebook API (developers.facebook.com)
 * Google API (developers.google.com)
 * ACCuWeather API - providing subscribers with access to location based weather. (api.accuweather.com/developers)
 * Instagram API ( to getting photos  and display them on website or app - Instagram.com/developer)
 * Twitter API (providing three types which are : REST API, search API, streaming API)
 * AT&T - providing a wide range of APIs that exposes thier internal assets and services, they can be used to build apps to send messages, locate users, do text to speech and speech to text etc (developer.att.com/apis)

The Difference Between a Web Service and a Web API
 * Web services - as a method of communicaiton Between two electronic devices over a network.- a software system designed  to support interoperable machine to machine interaction over a network. 
 * A web API is a special kind of web service where the emphasis has been moving to a simpler Rerepresentational State Transfer REST based communications.  
 * A web API can be considered as a subset of web service. A web service has an interface described in a machine processable format. Other systems interact with the web service in a manner prescribed by its description using SOAP (Simple Object Access Protocol) messages, typically conveyed using HTTP with an XML serilazation in conjunction with other web related standards. 
 * REST is another architectural pattern , an alternative to SOAP. 
 * RESTful applications use the HTTP built in headers to carry meta information and use the GET, POST, PUT and DELETE to perform CRUD operations. 
 * It is resource oriented and uses clean URL. The body can be JSON/XML. 
 ABOUT SOAP ? 
  * It typically use HTTP as a transport protocol ( not mandatory)
  * It can be over JMS/FTP/SMTP or any layer 7 protocol. 
  * It's message structure consists of an SOAP envelope, inside of which are the headers and the body ( contains the actual information to be sent)
  * Based on the standard XML format, designed especially to transport and store structured data. 
  * It's a mature standard and is heavily used in many systems, but it does not use many of the functionalities built into HTTP.  

How are APIs different from SOA? 
  SOA: service-oriented architecture. ( its core concept is the notion of service)
 * A service can be defined as a logical Rerepresentation of a repeatable activity that has a  specific outcome. 
 * SOA defines the architecture and principles for designing services for an application to increase its reuse. (Services are well contained and have a well defined interface that defines the contract between the service provider and the consumer). 
 * API are designed  with consumer needs in mind. 
 * The difference from SOA: 
     - SOA helps in the agility and pace of the delivery of a service while API helps in the pace of innovation for building apps. 
     - SOA emerged as a means to shield service consumers from backend changes while API can provide a layer to shield the services from the rapidly changing demands of front-end apps. 

  * Services are the means by which providers codify the base capabilities of their domains. (APIs are the way in which those capabilities are repackaged, productized and shared in an easy to use format). APIs and services are complementary rather than contradictory,and being applied together, dramatically increase the overall effectiveness of enterprise innovation. 
  * At technological level- [SOA is related to XML and SOAP while API is related to REST and JSON] while [API is described using Swagger or RAML]

The API value chain 
 * API provides a means to expose business assets to the end user. 
 * The business asset marks the beginning of the API value chain and making it more available for others to use. It can be any data or business functionality. It can range from product catalogs,to customer information, to twitter feeds, to postal tracking information, to payment and banking services. 

Business models for APIs
 * APIs form the foundation of digital business. The biz model to adopt depends on the asset being exposed as an API. The asset can be data, the biz logic or the presentation. 



Chapter 2 : API management 
APIS forms the window into an enterprise's data and services, they allow applications to easily communicate with each other using a lightweight protocol like HTTP. 
* Developers use APIs to write applications that interact with back end system. 
* Once an API has been created, it needs to be managed using an API management platform. 
* An API management plaform helps an organization publish APIs to internal, partner, and external developers to unlock the unique potential of their assets - providing the core capabilities to ensure a successful  API program throught developer engagement, biz insights, analtyics, security and protection. 

What are API management offerings: 
 - Analyze: business performance, - Monetize : Digital Assets, - Accelerate :Digital channel,- Drive -adoption. 

 API management plaform provides these capabilities: 
  - Developer enablement for APIs (API discovery, developer and app onboarding, collaboration and community, develoeper enablement admistration)
  - Secure, reliable and flexible communicaiton (authentication and authoirzation, threat detection, data privacy, traffic management, interface translation, service orchestration and routing)
  - Api lifecyle management (api publication, version management, change notification, issue management)
  - API auditing, logging and analtyics (activity logging, user auditing, biz value reporting, contract management, advanced analtyics, service level monitoring ) 

An API management platform provides these capabilities as three major types of services which are : 
 - • API GATEWAY SERVICES - allow you to create and manage APIs from existing data and services. They allow you to add security, traffic management, interface translation, orchestration, and routing capabilities into your API. 
 - • ANALTYICS SERVICES - it monitor traffic from individual apps and provide business with insight and operational metrics, API and app performance, and developer engagement metrics.
 -  • DEVELOPER PORTALS - it provide capabilities for developer and app registration and onboarding, API documentation, community management, and API monetization.

In summary: API has 3 management platform services: 
 - Developer services which are: Developer onboarding, API documentation, Community management and Monetization. 
 - Analytics services which are: biz metrics, operational metrics, developer metrics and app performance. 
 - API gateway services which are: API security, Traffic management, Interface translation and 'orchestration and routing'

 Secure, Reliable, and Flexible Communication
API helps digital apps to communicate with back-end services and the core of API is COMMUNICATION and API must create these 3 features of commnication: being secure,reliable and flexible. 

 *API gateway 
    - it provides the services that form the core capabilities required for API commnications between the back end services and digital apps. 
    - it helps to expose, secure and manage backend data and services as RESTful API. 
    - It provides a framework to create a facade (face) in front of the backend service. The face intercepts the API requests to enforce security, validate data, tranform messages, throttle traffic and route it to the backend service. 
    - The static response may be cached to improve the performance. 
    - The gateway can optionally orchestrate requests between multiple backend services and also connect to database to service the requests. 

    Summary: of the capabilities of API gateway - (To secure, Validate, throttle, Transform, Orchestrate, Cache and Route). 
  All these features/ functionalities can be implemented in a gateway, mostly through CONFIGURATION and SCRIPTING extensions. 

* API security
  - it provides access to valuable and protected data and assets. API mgt platform address the following aspects of API security: 
     * authentication - it's the process of uniquely determining and validating the identity of a client. An app acts like a client making an API call, a software that consumes access to enterprise assets, data and services. The app key serves as an identity for the app making a call to the API.It's normally issued and managed via the API mgt plaform of the API provider. An app key is also known as an API key,an app ID or a client ID. 
     The API mgt plaform must have the ability to issue, track and revoke the app key and the service of authentication may require integration with IDENTITY MGT SYSTEM that controls user access to applications and other services. 

     * authorization - It controls the level of access that is provided to an app making an API call. When an app makes an API call,it normally passses an OAuth access token in the HTTP headers. It controls which ApI resources and methods that an app can invoke. An access token can be associated with one or more scopes, each access token may have an expiry duration that controls the duration for which the token is valid, if the token is expired, a new access token would be required to be generated. 

     * identity mediation - API mgt must have the capabilities to integerate  the back end IDM platforms and do indentity mediation. The backend services may be secured using SAML or any other WS-security headers. 

     * data privacy - sensitive data in transit should be encrypted. if data tends to be logged anywhere, it must be masked. Data privacy can be achieved through ENCRYPTION and DATA MASKING. sensitive data needs to be encrypted with digital certificates in transit. The API mgt should have support for SSL/TLS. 

     * key and certificate mgt - the provision of capacity to manage keys and certificates required for data privacy. 
     * DoS (denial of attack) protection -APis are vulnerable to attacks, and it tends to open valuable data and assets outside the firewall of the enterprise and being attack through the means of pumping unexpected high traffic through the APi.  
     * Threat detection - Content based attacks can be in form of malformed XML/JSON, malicious scripts or SQL within the payload. Error visualization capabilities can help detect any hacker attempting to find an exploitable weakness in APIs.

* API Traffic mgt - depending on the nature of data and sercies provided by the API, traffic mgt offers a diff. biz value to diff. classes of customers. providing the following capabilities for traffic mgt - 
  - Consumption quota: defines the number of API calls that an app is allowed to make to the backend over a given time interval. A common purpose for a quota is to divide developers into categories, each having different quotea and relationship with the API. Example: free and paid developers having difference number of calls. 
  - Spike arrest: identify an unexpected rise in the API traffic, helping to protect backend systems that are not designed to handle a high load. API traffic volume exceeding the spike arrest limit may be dropped by the API mgt platform to protect backend systems in the event of DoS attacks. 
  - Usage throttling: provides a mechanism to slow down subsequent API calls, helping to improve the overall performance and reduce impacts duing peak hours. Making sure that the API infrastructure is not slowed down by high volumes of requests from a certain group of customers or apps. 
  - Traffic prioritization : helps the API mgt platform to determine which class of customers should be given higher priorites. API calls from high priority customers shold be processed first. 

* Interface translation -  API being created for customer focus, the interface for the API will likely be different from that of the backend services that is exposed. The API gateway should support the following: 
   - Format translation: the backend system might expect data in SOAP,XML, CSV or any other properitary format. The API gateway should be able to easily transform from one format to another, since data format can't be consumed by the API consumer. Mapping from JSON to any other data format may be supported through customization. 
   - Protocol translation: most backend systems that host services provide a SOAP interface for consumers. SOAP isn't a protocol that is suitable for APIs to build apps for digital services. the protocol transformation from SOAP to REST provides a lightweight interface for consumers. 
   - Service and data mapping: being able to provide a graphical Rerepresentation of the different  backend serice components that maps to provide an API service. 

* Caching - a mechanism to optimize performance by responding to requests with static responses stored in memory. An Api proxy can store backend responses that don't change frequently in memory. Caching helps to improve an API's performance through reduce latency and network traffic. 

* Service Routing - the routing requests from consumers to the right backend service providing the biz functionalities. Supporting the right capabilities: 
  - URL mapping: It allows the plaform to change the path in the incoming URL to that of the backend service. URL mapping happens at runtime so that the requested resource is retrieved by the consumer via service dispatching. 
  - Service dispatching: allows API mgt to select and invoke the right backend service. 
  - Connection pooling: ability to maintain a pool of connections to the backend service and improves overall performance. 
  - Load balancing: it helps to distribute API traffic to the backend services. Based on the selected algorithm, the requests must be routed to the appropriate resoure that is hosting the service. 

* Service orchestration - the process by which API gateway need to invoke multiple backend service ina particular sequence or in parallel and then send an aggregated response to the client. It helps to create a coarse grained service by combining the results of multiple backend services invocation. 


API Auditing, logging and analtyics. 
An API GATEWAY should provide the capability to meause, monitor and report aPI usage analytics. Good biz friendly dashboards for APi analtyics measure and improve biz value. 
 * API analtyics - it provide with information to make future decisions about API. 

 * Activity Logging - the plaform should capture and provide information on who is using an API, the types of apps and devices the API are being called from and which geographical region is the source of the API traffic. 
 * User Auditing - it helps the API admistrator review historical information to analyze who accesses an API, when it is accessed, how it is used and how many calls are made from the various consumers of the API. 

 Chapter 3 - Designing a RESTful APi interface. 
 - REST relies on stateless, cacheable and client server communication protocols such as HTTP. 

 REST principles - REST is a set of design principles for building scalable web services. 
 6 Constraints for building RESTful architecture : 
  - Uniform interface : it defines the communication contract between client and the server , helping to decouple the architecture. Client and server applications can be developed independently as long as they abide by the interface. Each resource has it own unique URI. 
  - Client server : The client server Constraints builds a loosely coupled and scalable web architecture. As long as the client and the server follow a Uniform inteface they can be developed independently using any language or technicology. 
  - Stateless : it indicates that a web server is not required to remember the state of the client application. All relevant contextual information should be sent by the client application in the request to the server forall its interaction. 
  - Cache:The REST Constraints that increases the scalability and overall perfoamance of the server application. The cache may reside any where in the network path between the client and the server.  
  - Layered system : it enables a network intermediary to be installed between the client app and the actual backend server. It can be proxy or a gateway that acts as a facade for the backend system. 
  - Code on demand: it enables a web server to Transfer executable programs to a client. It enables to establish a technology coupling between the client and the web server. 

  Designing a RESTful API
  Consideration for designing a REST API interface: 
   * Identification of resources - A resource is any web based concept that can be referenced by a unique indentify and manipulatedvia the uniform interface. A resource can be a single or a collection of entities. 
       Case Study - When designing a REST Api for a travel portal, resources could be customer, reservation,ticket, hotel, flight, bus,car etc. The key abstraction of information in REST is a RESOURCE. A resource is identify by a URI (uniform resource identifier). A URI provides the name and the network address of a resource. 
   * Manipulation of resources through representation - Clients modify a representation of a resource. The same exact resource may be repesented for different clients. The representation is a way for clients to interact with the resource but it's not the resource itself. 
       Case Study - For a UI client, it might be represented in HTML format, for application clients, it might be in either JSON/XML format. 
   * Self descriptive messages - Each message may contain additional information to tell the recipient how to process it. Information such as format(JSON/XML), size,payload itself and other metadata information included in the message can be used by the receipt for processing. 
     An HTTP message provides headers to organize the various types of metadata into uniform fields, Eg: Content-type(used to specify the format of the message), Content-length (used to specify the size of the payload).
   * Hypermedia as the engine of application state - A resource state information may include links to other resources. These links provides information on what to do next and how to traverse through other related resources in a meaningful manner. Example: AFter getting information about the account, the user might want to deposit, withdraw or transfer money, so the response of a RESTful service providing the account info may include links for the next action that the customer may want to do. 

 Resource Identifier Design Using URIs. 
  A well designed resource makes the API intuitive,simple to understand and easy to use. 
  * Best practices for designing RESTful APIs.
   - Resource Naming Conventions : every resource should have a meaningful name to identify itself. URI should be refer to a thing rather than an action,(refer to a thing not an action. Example: /customers instead of /getCustomers). 
   - Modeling resources and subresources: Resource form the core of REST API design, the starting point of modeling resource is to analyze the current biz domain and indentify all the relevant objects in it that can be named. The focus for identifying resources and modeling them should be from the customer's point of view. Example: Identifying a collection of customers using /customers, while a single instance of a customer can be identified using /customers/{customerId}.Each customer may further have multiple orders.
    - Best practices for identifying REST API resouces: 
      * Resource should not be too course grained because this leads to APIs that are too difficult to use and maintain. 
      * It should be designed such that they don't lead to migration of control flow biz logic to the API consumer side. 
      * Resource selection should be independent of the underlying domain implementation details. 
      * Resource should not be too fine grained because they lead to chatty communication between the consumer and the provider. 

  URI PATH Design 
   Every collection and resource in an API has its own URL. It's recommended to design URLs using an alternate combination of collection/resource path segments, relative to the API entry point. 

  URI FORMAT 
   URI is a compact string of characters for identifying an abstract or physical resource. This identifier can be realized in one of two ways: as a Uniform Resource Locator(URL) or a Uniform Resource Name(URN). 
    URLs are used to identify the online location of an individual resource, URNs (eg urn:user:mike) are intended to be persistent,location independed identifiers. It defines an item's identity (the user's name is Mike) and the URL provides a method for finding it (Mike can be found at www.foo.com/users/)

  HTTP Verbs for RESTful APIs 
   HTTP verbs form an important part of a RESTful API design. The verbs perform the CRUD operations on the resource as follows: 
    * POST : to create a new instance of the resource (it is used to create a subresources, which is subordinate to the parent resource identified by the request URI). On successful execution, of the POST request, the origin server should respond witha  201 created status code. The response should contain a 'Location' header to specify the location of the newly created resource. Making two identical POST request usually results in two resources containing the same entity. 
    * GET: used to read (used by the client to retrieve information about the requested resource entity identified by the request URI.It should only retrieve data and should never modify the data in any way, it's a read-only method and those not make any changes to the resource data). The server returns the requested data normally in XML/JSON depending on the format requested by the client. The HTTP ACCEPT header is used by the client to specify the expected format of the response. Data is returned only if the conditions described by the header field(s) are satisfied. 
    On successful execution of the GET request, the server responds with HTTP response code of 200 OK, 404 Not found or 400 bad request status code. 
    * PUT: used for complete update 
    * PATCH: used to update an existing resource defination. 
    * DELETE: to delete. 
  
  The differences between PUT and POST
   * recommended to use POST for creating new resources and PUT for updating an already existing resource. 
   * use POST if the server is responsible for resource name/ID and hence is the URI of the new resouce. PUT may be used for creating a new resurce only when the client is responsible for deciding the new URI(via its resource name/ID) for the resource. 
   * a POST should be used if the client doesn't or shouldn't know the resulting URI of the new resource before creation. If the resource is already created , PUT should be used to update the resource. 


 Chapter 4 - ApI Documentation
 The Importance of API documentationlor
 * API documentation communicates a vast amount of information about the API. '

 The importance of API documentation should have the following: 
  - Get users started quickly
  - Include useful and relevant information
  - Provide sample code
  - Document a list of REST endpoints
  - Document the message payload
  - Provide response status code and error messages 

Audience for API documentation
 - CTO (evaluates similar and competing APIS from a biz, tech and monetization perspective), 
 - App/Integration architect (explores the API to match the requirements for building an app/an integration solution)
 - App developer (wants to get started using the API with a quick start guide and a detailed tutorial)
 - IT support specialist (supports the app and interested in the error and troubleshooting information for debugging any issues with the app)

 Models for API documentation
  To making API documentation effective, it should include the following aspects about the API: 
   - Title (the title should provide the name of the API, used for identification)
   - Endpoint (It's the entry point for the API, defining the URL that clients need to use to invoke the API)
   - Method (it defines the HTTP verbs)
   - URL parameters (it define the parameter names and their format used in the API call as a query string)
   - Message payload (it should specify the structure and format of the request and reponse message, JSON and XML are the most common formats used for a REST API)
   - Header parameters (it specify the standard and custom HTTP headers included in the request and reponse headers)
   - Response code (the HTTP response codes that the client can expect from the API under various conditions should be included in documentation)
   - Error code (the responses status API consumer can except in different error scenarios)
   - A sample request and response ()
   - Tutorials and walkthrough
   - Service level agreement (it defines API's non-functional requirements)

   API documentation standards (frameworks) are: Swagger, RAML and API blueprint. 

Chapter 5: API Patterns
Disclaimer: 
* APIs should be designed for longevity, any change to an API carries the risk of breaking the clients' application code. 
* Building APIs from robust and proven patterns fosters a happy developer community and saces teh company a lot of cash. 

Best practices for building a pragmatic RESTful API
 1. Design APIs with RESTful URLs - It should point to either a collection of resources/subresources or an individual entity within the collection. 
 2. Use HTTP verbs for CRUD action on resources. - Using the HTTP verbs. (POST, GET, PUT etc)
 3. Use operation in the URL when HTTP verb can't map to the action. 
 4. Use SSL/TLS for all communications with REST APIs. - it exposes enterprise data and assets. Manual authentication with SSL/TLS can help the server to validate the identify of the client in addition to ther client validating the server. 
 5. Do not redirect from non-SSL API endpoints to SSL endpoints. 
 6. API versions - versioning iterates and improves APIs by providing a smooth transition path. Version inforamtion can be included in custom HTTP header. 
 7. Design the API interface to support filerting on the result set - client app using the API would obtain a lean and filerting response for a GET request. 
 8. Design the API to support pagination - pagination is a good feature useful in handling large responses from an API, the filtered response from backend service for an API may contain hundreds of records. pagination parameters in the request as query parameters 'limit' and 'offset',most common query parameters to specify pagination requirements. 
 9. Return resource representation in response to creating and updating - the response for POST,PUT and PATCH operations results in creating/updating a resource. successful execution of a POST request should return a HTTP 201 created status code along the 'Location' header containing the URL of the newly created resource. 
 10. Use HTTP headers to specify the media type for the message payload - when sending a request or a response, include the 'Content-Type' header to specify the content type for the message payload, helping th emssage recipient to easily identify the parser to be used for processing the message. Similarly,using the 'Accept' header in the request to indicate the format of the response expected by the consumer from the provider. 
 11. Use HTTP headers to support caching - HTTP provides a number of useful headers to efficiently communicate caching information. The 'ETag' header contains a hashed value of the resource information. Headers can be used to communicate resource modification date/time, expiry time of the cache, validation rules and cacheability of a resource. 
 12. Secure APIs using authentication information in HTTP header - authentication credentials should be included in the HTTP authorization header. Since REST services are stateless, cookies should not be used. Basic authentication should be used when the ApI needs to identify the end user, OAuth based authentication can be used when a third party  application needs to access the API on the behalf of another user. 
 13. Handle errors using HTTP status code and appropriate error messages - in case of errors, APIs should respond with useful error messages in a consumable format. The error response payload should at a minimum communicate the following: a. Error message code - a unique alphanumeric code to uniquely identify the error   b. Error message - a brief summary of the error   c. Error description/reason - a description/reason for the error. 

 API Management Patterns
 * enterprise services provide access to Assets and Legacy systems. 
 * SOAP and REST APIs are the two most common implementation technologies used for building services. (An API mgt plaform is used to transform and manage these services to make them more flexible,scalable and secure). 
  
  Differs patterns are: 
  1. API facade pattern - The API facade patterns helps the API team create developer friendly API designs and connect to complex enterprise legacy record systems.It comes in handy for creating a simple API interface for a set of complext backend systems that are hard to change for digital transformation. This pattern provides a layer between the backend systems and the consumer apps. This layer not only build a simple API interface but can alos implement other functionalities such as security,data transformation,version mgt, orchestration, error handling, routing and much more. 
  2. API composition - The client app has to be built so that it makes multiple calls directly to services, negotiates any security challenges and does data format changes as required. An API gateway is a server that acts as a single pont of entry into the system. It encapsulates the internal system architecture and provides an API that is customized for the client. 
  3. Session Mgt - API services should be designed to be stateless, but sometimes state mgt becomes necessary for designing an app with better user experience. Shopping cart, hotel booking are some examples where session mgt is necessary. Sessions maintain the client context on the server. 

Two phase transaction mgt
<<<<<<< HEAD
<<<<<<< Updated upstream
In a two phase transaction, the transaction coordinator prepares the participating resources for a transaction in the first step, if the first step is successful, the commit is issued to the participating resources in the second step. 
=======
In a two phase transaction, the transaction coordinator prepares the participating resources for a transaction in the first step. 
=======
In a two-phase transaction, the transaction coordinator prepares the participating resources for a transaction in the first step. If the first step is successful, the commit is issued to the participating resources in the second step.
Managing all transaction from the client app is going to result in a chatty conversation. The complex processing logic in the app for transaction coordination and management definitely yields a poor app performance. The solution is to handle the conversation from an API facade.The logic to prepare, commit, and roll back two-phase transaction management is implemented in the facade. 

Synchronous to Asynchronous Mediation

Routing
In a complex service composition scenario, the routing rules may not be fixed.
The back end to which the request should be routed may have to be dynamically determined based on parameters in the incoming request. 



>>>>>>> 54ffe5fa50f869ba34cbe5ce85845605fa656615
 
>>>>>>> Stashed changes

Api throttling 
When an enterprise opens their API to the external world, it is expeceted to see an increase in the API traffic, developers using these to build new innovative apps. To maintain the overall traffic within the capacity limits of the backend systems by throttling the API. 

Common apporaches to throttling 
* Spike arrest
* Rate limit / quota
* Concurrent backend connections

Caching : Cache pattern can be used within an API gateway to cache backend responses or any information required for processing the request. 
* Each cache request 

- Logging and monitoring
- API analtyics

API security patterns
Needing visibilty into API program to measure the success and make strategic investments. 

Common forms of attack
* DoS attack - Malicious users flood the system with high volume API traffic that the backend systems can't handle, bringing it to a halt. 
* Scripting attacks - attackers inject malicious code into the system to get access and possibly tamper backend data and assets. 
* Eavesdropping - the hackers gain access to an API request or response while the data is in transit over a nonsecure API communication channel. 
* Session attack - the hackers gain access to the session ID used by a user/app, this info is then used for personalification and access to the user's account and resources. 
* Cross site scripting (XSS) - this is a special form of scripting attack that takes advantage of known vulnerability in a website or webapp. 

API Risk Mitigation best practices
Controlling access to an API should authenticate and authorize users/apps making API calls and being able to scan incoming messages for well formedness and any potential threats in it. 

................................... Continues chapter 5 later. 

Chapter 6 - API version management. 

 API versioning vs software versioning
  - Every software release is versioned, 
  Common format for versioning software is: <MajorVersion>.<MinorVersion>.<PatchVersion><OptionalPackageIdentifier> 
  Example: v2.4.16-RC4 (the checksum of the software package is normally used to identify a particular version, if the checksum changes, the version is considered different) but it doesn't apply to REST API versioning because if a new version is introduced for every minor chang to the API, it causes maintainance nightmare. 
  - The REST API version should correspond to the service version and not the software/the package version implementing the service. 
  A new API version should be created only when there's change in the service interface or the contract that is being used by the client. 

 The need to version APIs
 An API defines a contract for communication between the client and a server hosting a resource to operate on them. 
 * The client may want to create, read, update or delete a resource as defiend in the contract. 
 * Changes may or maynot be backward compatible. If the changes compatible, it may be possible to handle it within the same API version. 
 * Versoning APIs helps maintain compatibility, enabling debugging and dependency control. 

 API versoning principles
 * An API version should not to break any existing clients
 * Keep frequency of major API versions to a minimum
 * Make backeward compatible changes and avoid making new API version
 * API versoning should not be directly tied to software versioning 

 Approaches to API version management
 * Versons using URLs - eg. http://www.foo.com/v1/customers
 * Versons using an HtTP header 
 * Versions using query parameters 
 * Versions using a host name 
 * Handling requests for deprecated versions   

 API version lifecyle management 
 * Common Approaches: 
   - Announce new upcoming version and versioning schedules, if any in the API developer portal
   - Send emails to registered developers about upcoming new API versions
   - introduced warning headers in alerts on older versions being deprecated
   - define a migration period and cut off date for support to older API versions. 

API Security
 The need for API security 
  - API allow consumers to interact with and accesss an enterprise's data and service. Exposing assets helps enterprises grow business and revenue. 

API Security Threats 
 - Different API security threats can be classified into: 
  - authentication 
  - authorization
  - message or content level attacks
  - man in the middle attacks
  - DDos Attacks ( distributed denial of service)

 API authentication and authorization 
  The forms used for API security are : 
   - API key: It identifies the application using an API and provides simple mechanism to authenticate the apps and they are generally long series of random characters typically passed as an HtTP query parameter or header, making it easy to use an API key in an API request for application authentication. Another name for API keys are: app ID, client ID, app key or consumer key.
   Note: 
   a. When a devloper registers his app with an API provider, a unique API key is provided to the developer, making the developer to secretly store this API key and use it in teh app requests when making an API call from the application. 
   b. An API key is normally a long alphanumeric string that is opaque and without any signature or encryption, making it to be less secure for authentication purposes and it is best use for auditing and identification. 
   - Username and password : in the form of authentication, the client prsents the server with a unique name (username) and a secret code (password). The server validates the username and password against its credential store and provides access to the client only on successful validation. 
   As per the scheme, the clients sends the server authentication credientials using authorization header and it is constructed as follows: 
      * The username and password are combined with a single colon (:)
      * The resulting string is then Base64 encoded
      * The authorization method and a space (Basic) are then entered before the encoded string 
    
  Example:  The username John and password john@123, results in a header that looks like - Authorization: Basic Sm9objhwohwoshe==
  Note: HTTp basic authentication is the most common form of authentication,and supported by nearly all clients and servers and easy to implement without the need for any special processing. 
   - sAML 
   - OAuth 
   - OpenID Connect 
   - X.509 client certificates and mutual authentication : 


